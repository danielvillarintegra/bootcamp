Introdução e o que é uma thread

Introdução e objetivos do curso

Conceitos iniciais sobre thread
- Definição de thread
- Visão geral dos processos e threads: O Android vai lançar uma execeção senós tentarmos acessar a rede através da thread principal
- Multitarefas no Android
- Modelo de threads no Android
- Android Thread principal, 60 fps < 17ms -
- AsyncTask: 	executar a tarefa de rede em um thread secundário
		fazer alterações na interface de usuário

Apresentação do exercício final
-

Exercício prático sobre os modelos de Threads no android - Parte 1
- Acessar os site 
a) api.open-notify.org
	People in Space Right Now -> http://api.open-notify.org/astros.json

b) https://jsonformatter.curiousconcept.com/

c) https://github.com/brunoluizcs/android-bootcamp-threading/tree/exercise-asynctask-completed
	tem três branchs:
		exercise-asynctask-completed
		exercise-asynctask
		main

- Abrir exercise-asynctask (e aguardar a completar a indexação) no IntelliJ (equivalente a criar "new empty project"), em TODO, GroupBy , desmarcar todos 

- Em Android Manifest incluir a permissão de acesso a internet:

	<manifest xmlns:android="http://schemas.android.com/apk/res/android"
        	  package="com.everis.bootcamp.threading">

	    <!--TODO: 001 Incluir a permissão de internet -->
	    <uses-permission android:name="android.permission.INTERNET"/>

	    <!-- TODO: 019 Incluir a propriedade android:usesCleartextTraffic="true" para requisição http-->
	    <application

- Em build.gradle(app), incluir bibliotecas (https://github.com/square/okhttp e https://github.com/google/gson): 
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //TODO: 002 Incluir a biblioteca com.squareup.okhttp3:okhttp:4.9.0 https://github.com/square/okhttp
    implementation "com.squareup.okhttp3:okhttp:4.9.0"

    //TODO: 003 Incluir a biblioteca com.google.code.gson:gson:2.8.6 https://github.com/google/gson
    implementation "com.google.code.gson:gson:2.8.6"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'

- em activity_main.xml, excluir o TextView e acrescentar
        <!-- TODO: 004 - Remover o textview abaixo -->
        <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Hello World!"
                app:layout_constraintBottom_toBottomOf="parent"
                app:layout_constraintLeft_toLeftOf="parent"
                app:layout_constraintRight_toRightOf="parent"
                app:layout_constraintTop_toTopOf="parent"/>

- em activity_main.xml

	<!-- TODO: 005 Transferir o ConstraintLayout para dentro de um ScroolView -->
	<androidx.constraintlayout.widget.ConstraintLayout
        	xmlns:android="http://schemas.android.com/apk/res/android"
	        xmlns:tools="http://schemas.android.com/tools"
	        xmlns:app="http://schemas.android.com/apk/res-auto"
	        android:layout_width="match_parent"
	        android:layout_height="match_parent"
	        tools:context=".MainActivity">

- em activity_main.xml, acrescentar:
	 <!-- TODO: 006 - Incluir um botão, TextView, ProgressBar para carregar os dados -->

Exercício prático sobre os modelos de Threads no android - Parte 2
Criar classe para representar o resultado da API
Criar a classe responsável por carregar os dados
Criar função para exibir os dados carregados
Desenvolvendo classe para rodar tarefa assíncrona e propriedade para requisição http

