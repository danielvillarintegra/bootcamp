Como usar os desafios de projeto para criar seu portfolio
Introdução
Configurando nosso primeiro projeto
Um pouco do Android Studio
Começando a por a mão na massa
O que são Temas
Criando a tela de criar tarefas

ViewBinding e date picker

- Acrescentar no gradle (module):

	// Android Studio 4.0 
	android { 
    		buildFeatures { 
        		viewBinding = true 
    		} 
	}

- Fonte: https://medium.com/androiddevelopers/use-view-binding-to-replace-findviewbyid-c83942471fc	

- Se acrescentamos ".val" a um objeto, o Android Studio já reformata o código instanciando o objeto:

	 ActivityAddTaskBinding.inflate(layoutInflater).val 

-resultando em:

 	val inflate = ActivityAddTaskBinding.inflate(layoutInflater) 

resultado 

	class AddTaskActivity : AppCompatActivity() {
    		override fun onCreate(savedInstanceState: Bundle?) {
		        super.onCreate(savedInstanceState)
		        val binding = ActivityAddTaskBinding.inflate(layoutInflater)
		        setContentView(binding.root)
    		}
	}

- Adicionar AddTaskActivity no Android Manifest (manualmente ou através da "lâmpada" ao colocar o cursor sobre o nome da class )

- Em AndroidManifes, mover o conteudo da MainActivity para a AddActivity e poder visualizar essa tela durante a execução:
       <activity
            android:name=".MainActivity"
            android:exported="true">
 
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>

        </activity>
        <activity android:name=".ui.AddTaskActivity" >

resultado :            

        </activity>

       <activity
            android:name=".MainActivity"
            android:exported="true">

        </activity>
        <activity android:name=".ui.AddTaskActivity" >

            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>

        </activity>

- Em AddTaskActivity, acrescentar insertListeners() após o binding:
	class AddTaskActivity : AppCompatActivity() {
	    private lateinit var binding: ActivityAddTasksBinding

	    override fun onCreate(savedInstanceState: Bundle?) {
        	super.onCreate(savedInstanceState)
	        binding = ActivityAddTaskBinding.inflate(layoutInflater)
        	setContentView(binding.root)

	        insertListeners()
    		}

	    private fun insertListeners() {


	    }
	}
- inserir um Log.e para saber se o onClickListeners está funcionando:

   private fun insertListeners() {
        binding.tilDate.editText?.setOnClickListener {
        	Log.e("TAG", "insertListeners")
        }

    }

- Remover o Log.e e acrescentar :

   private fun insertListeners() {
        binding.tilDate.editText?.setOnClickListener {
            val datePicker = MaterialDatePicker.Builder.datePicker().build()
            datePicker.show(supportFragmentManager, "DATE_PICKER_TAG")
        }

    }

- Criar package extensions dentro de java/br.com.danielvillarintegra.todolist
	java/br.com.danielvillarintegra.todolist.extensions

- Criar AppExtensions.kt dentro de java/br.com.danielvillarintegra.todolist.extensions e inserir:

		package br.com.danielvillarintegra.todolist.extensions

		import java.util.*

		private val locale = Locale("pt", "BR")

		fun Date.format() : String {
		    return java.text.SimpleDateFormat("dd/MM/yyyy").format(this)
		}

- Adicionar no AddTaskActivity.kt

                binding.tilDate.editText?.setText(Date(it).format())

ou adicionar uma var no AppExtensions.kt e substituir a linha acima:

	var TextInputLayout.text : String
	    get() = editText?.text?.toString() ?: ""
	    set(value) {
	        editText?.setText(value)
	    }

e no AddTaskActivity.kt

    private fun insertListeners() {
        binding.tilDate.editText?.setOnClickListener {
            val datePicker = MaterialDatePicker.Builder.datePicker().build()
            datePicker.addOnPositiveButtonClickListener {
                binding.tilDate.text = Date(it).format()
            }
            datePicker.show(supportFragmentManager, "DATE_PICKER_TAG")
        }

    }

- Acrescentar timeZone:

    private fun insertListeners() {
        binding.tilDate.editText?.setOnClickListener {
            val datePicker = MaterialDatePicker.Builder.datePicker().build()
            datePicker.addOnPositiveButtonClickListener {
                val timeZone = TimeZone.getDefault()
                val offset = timeZone.getOffset(Date().time) * -1
                binding.tilDate.text = Date(it + offset).format()
            }
            datePicker.show(supportFragmentManager, "DATE_PICKER_TAG")
        }

    }

Time Picker

- No AddTaskActivity.kt e em private fun insertListeners() acrescentar o timePicker, o botão cancelar e o botão adicionar.

Resultando
 
    private fun insertListeners() {
        binding.tilDate.editText?.setOnClickListener {
            val datePicker = MaterialDatePicker.Builder.datePicker().build()
            datePicker.addOnPositiveButtonClickListener {
                val timeZone = TimeZone.getDefault()
                val offset = timeZone.getOffset(Date().time) * -1
                binding.tilDate.text = Date(it + offset).format()
            }
            datePicker.show(supportFragmentManager, "DATE_PICKER_TAG")
        }

        binding.tilHour.editText?.setOnClickListener {
            val timePicker = MaterialTimePicker.Builder()
                .setTimeFormat(TimeFormat.CLOCK_24H)
                .build()
            timePicker.addOnPositiveButtonClickListener {

                val minute = if (timePicker.minute in 0..9) "0${timePicker.minute}" else timePicker.minute

                val hour = if (timePicker.hour in 0..9) "0${timePicker.hour}" else timePicker.hour

                binding.tilHour.text = "${hour}:${minute}"
            }

            timePicker.show(supportFragmentManager, null)
        }

        binding.btnCancel.setOnClickListener{
            finish()
        }

        binding.btnNewTask.setOnClickListener{
            val task = Task(
                title = binding.tilTitle.text,
                date = binding.tilDate.text,
                hour = binding.tilHour.text
            )
            TaskDataSource.insertTask(task)
	}
   
- Adicionar package model e datasource
- No model inserir Task
	package br.com.danielvillarintegra.todolist.model

	data class Task(
	    val title: String,
	    val hour: String,
	    val date: String,
	    val id: Int = 0
	)

- No datasource inserir TaskDataSource
	package br.com.danielvillarintegra.todolist.datasource

	import br.com.danielvillarintegra.todolist.model.Task

	object TaskDataSource {
	    private val list = arrayListOf<Task>()

	    fun getList() = list

	    fun insertTask( task: Task) {
        	list.add(task.copy(id = list.size + 1))
	    }
	} 
 
Recycler View

- Em AndroidManifest, mover o conteudo da AddActivity para a MainActivity e poder visualizar essa tela durante a execução:
        </activity>

       <activity
            android:name=".MainActivity"
            android:exported="true">

        </activity>
        <activity android:name=".ui.AddTaskActivity" >

            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>

        </activity>
 
resultado :            

      <activity
            android:name=".MainActivity"
            android:exported="true">
 
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>

        </activity>
        <activity android:name=".ui.AddTaskActivity" />

Mostrando lista de tarefas
- Em res , new, New Resource Directory
- Resource type : menu

- E e no res/menu, new, New Resource Directory, menu, com o nome popup_menu.xml e inserir os itens abaixo:

	<?xml version="1.0" encoding="utf-8"?>
	<menu xmlns:android="http://schemas.android.com/apk/res/android">
	    <item
        	android:id="@+id/action_edit"
	        android:title="@string/label_edit" />

	    <item
        	android:id="@+id/action_delete"
	        android:title="@string/label_delete" />

	</menu>

Editando Tarefas
-

