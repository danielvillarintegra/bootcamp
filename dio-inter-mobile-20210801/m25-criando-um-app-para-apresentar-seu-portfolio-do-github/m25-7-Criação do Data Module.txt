Criação do Data Module:

- Artigo sobre injeção de dependência (di).
Koin

- No pacote java/br.com.dio.app.repositories/data criar "di"
e adiconar o kotlin / object DataModule.kt

	private inline fun <reified T> createService(): T {
	reurn Retrofit.Builder()
		.baseUrl("https://api.github.com/")
		.build().create(T::class.java)
		}
	}

- single (semelhante a um singletron - devolve sempre a mesma instância) que é o oposto de um factory (devolve sempre uma instância nova).

- Acessar:
https://square.github.io/retrofit/

- Retrofit turns your HTTP API into a Java interface:
public interface GitHubService {
  @GET("users/{user}/repos")
  Call<List<Repo>> listRepos(@Path("user") String user);
}

- GitHubService
Retrofit retrofit = new Retrofit.Builder()
    .baseUrl("https://api.github.com/")
    .build();

GitHubService service = retrofit.create(GitHubService.class); 

- Each Call from the created GitHubService can make a synchronous or asynchronous HTTP request to the remote webserver.
Call<List<Repo>> repos = service.listRepos("octocat");


...

- No pacote java/br.com.dio.app.repositories/data criar package "services" e adiconar o kotlin / interface GitHubService.kt



